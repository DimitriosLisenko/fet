#!/usr/bin/env ruby

# frozen_string_literal: true

require "gli"
require "fet"

# Class in charge of implementing command-line interface
class App
  extend GLI::App

  program_desc("Functional Ear Trainer")

  version(Fet::VERSION)

  subcommand_option_handling(:normal)
  arguments(:strict)

  accept(DateTime) do |string|
    DateTime.parse(string)
  end

  desc("Generate MIDI files for ear training")
  command(:generate) do |c|
    c.desc("Generate MIDI files for listening")
    c.long_desc("Each MIDI file will contain a chord progression, followed by the specified number of degrees - first harmonically, then melodically after a pause.")
    c.command :listening do |listening|
      listening.desc("Tempo at which the chord progression is played at")
      listening.default_value(120)
      listening.flag([:t, :tempo], type: Integer)

      listening.desc("Number of degrees to play")
      listening.default_value(1)
      listening.flag([:d, :degrees], type: Integer, must_match: (1..11).map(&:to_s))

      listening.desc("Number of exercises to generate")
      listening.default_value(200)
      listening.flag([:e, :exercises], type: Integer)

      listening.desc("Generate all single degree listening exercises (ignores -e and -d flag)")
      listening.default_value(false)
      listening.switch [:a, :"all-single-degree"]

      listening.action do |global_options, options, args|
        Fet::Cli::Generate::Listening.run(global_options, options, args)
      end
    end
  end

  command(:generate) do |c|
    c.desc("Generate MIDI files for listening (single note)")
    c.long_desc("Each MIDI file will contain a chord progression, followed the same note across all files.")
    c.command :single_note_listening do |single_note_listening|
      single_note_listening.desc("Tempo at which the chord progression is played at")
      single_note_listening.default_value(120)
      single_note_listening.flag([:t, :tempo], type: Integer)

      single_note_listening.action do |global_options, options, args|
        Fet::Cli::Generate::SingleNoteListening.run(global_options, options, args)
      end
    end
  end

  command(:generate) do |c|
    c.desc("Generate MIDI files for singing")
    c.long_desc("Each MIDI file will contain a chord progression, followed by a specified pause, during which the degree should be sung."\
                " The degree is then played for confirmation.")
    c.command :singing do |singing|
      singing.desc("Tempo at which the chord progression is played at")
      singing.default_value(120)
      singing.flag([:t, :tempo], type: Integer)

      singing.desc("How many seconds to wait before playing the correct note")
      singing.default_value(3)
      singing.flag([:p, :pause], type: Integer)

      singing.action do |global_options, options, args|
        Fet::Cli::Generate::Singing.run(global_options, options, args)
      end
    end
  end

  desc("Run the ear training application")
  command(:play) do |c|
    c.desc("Run the ear training application for listening")
    c.long_desc("Each level will play a chord progression, followed by the specified number of degrees harmonically. The correct degrees should be selected.")
    c.command :listening do |listening|
      listening.desc("Tempo at which the chord progression is played at")
      listening.default_value(120)
      listening.flag([:t, :tempo], type: Integer)

      listening.desc("Number of degrees to play")
      listening.default_value(1)
      listening.flag([:d, :degrees], type: Integer, must_match: (1..11).map(&:to_s))

      listening.desc("Type of the chord progression")
      listening.default_value("major")
      listening.flag([:k, :"key-type"], type: String, must_match: ["major", "minor"])

      listening.desc("Automatically go to the next exercise when the answer was correct")
      listening.default_value(true)
      listening.switch [:n, :"next-on-correct"]

      listening.desc("Limit which degrees can play")
      listening.default_value([])
      listening.flag([:l, :"limit-degrees"], type: String, must_match: Fet::Degree::DEGREE_NAMES.flatten, multiple: true)

      listening.action do |global_options, options, args|
        Fet::Cli::Play::Listening.run(global_options, options, args)
      end
    end
  end

  desc("Score commands")
  command(:score) do |c|
    c.desc("Show the score summary")
    c.command :summary do |summary|
      summary.desc("Only include games that had more playtime than the specified amount (seconds)")
      summary.default_value(0)
      summary.flag([:s, :seconds], type: Integer)

      summary.desc("Include games from this date onwards (YYYY/MM/DD)")
      summary.default_value(nil)
      summary.flag([:f, :"from-date"], type: DateTime)

      summary.desc("Include games prior to this date (YYYY/MM/DD)")
      summary.default_value(Date.today.to_s)
      summary.flag([:u, :"until-date"], type: DateTime)

      summary.action do |global_options, options, args|
        Fet::Cli::Score::Summary.run(global_options, options, args)
      end
    end
  end

  on_error do |exception|
    puts exception.backtrace
    true
  end
end

exit App.run(ARGV)
